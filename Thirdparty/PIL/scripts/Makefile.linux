################################################################################
# Platform Settings
################################################################################
MAKE_OS     = linux

CC          = gcc
CXX         = g++
NVCC        = nvcc
AR          = ar

MOC         = moc-qt4
RCC         = rcc

OBJEXT      = .o
EXEEXT     ?= 
ALIBEXT     = .a
DLLEXT      = .so

################################################################################
# Library Settings
################################################################################

# libray configure file
LIBRARY_CONFIG_FILE ?= $(TOPDIR)/scripts/LIBS_CONFIG.$(MAKE_OS)
sinclude $(LIBRARY_CONFIG_FILE)

# default CFLAGS & LDFLAGS
COMPILEFLAGS    ?= $(SIMP_CFLAGS)
LINKFLAGS       ?= $(SIMP_LDFLAGS)

################################################################################
# Path Settings
################################################################################

Here_Path       = $(shell pwd)
HereFolderName  = $(shell pwd |sed 's/^\(.*\)[/]//' )

# default paths can be changed by file 'config.mk'
sinclude ./config.mk

TOPDIR		?= .
SRC_PATH    ?= .
BUILD_PATH	?= $(TOPDIR)/build
LIBS_PATH	?= $(TOPDIR)/libs
BIN_PATH    ?= $(TOPDIR)/bin
OUTPUT      ?= $(HereFolderName)

MAKE_TYPE   ?= bin #shared static


LIB_PREFIX  ?= lib

ifeq "$(MAKE_TYPE)" "bin"
OUTPUT_NAME ?= $(BIN_PATH)/$(LIB_PREFIX)$(OUTPUT)$(EXEEXT)
endif

ifeq "$(MAKE_TYPE)" "shared"
COMPILEFLAGS+= -fPIC -shared
OUTPUT_NAME ?= $(LIBS_PATH)/$(LIB_PREFIX)$(OUTPUT)$(DLLEXT)
endif

ifeq "$(MAKE_TYPE)" "static"
OUTPUT_NAME ?= $(LIBS_PATH)/$(LIB_PREFIX)$(OUTPUT)$(ALIBEXT)
LINKFLAGS   += 
endif


################################################################################
# Source Files Config
################################################################################

#Autoset things
CPP_FILES       ?= $(shell find $(SRC_PATH) -name \*.cpp)
CC_FILES        ?= $(shell find $(SRC_PATH) -name \*.cc)
C_FILES         ?= $(shell find $(SRC_PATH) -name \*.c)        
H_FILES         ?= $(shell find $(SRC_PATH) -name \*.h) 

ifneq "$(SRC_FILES)" "" 
OBJ_FILES       ?= $(patsubst %.cpp,%.o,$(SRC_FILES))
else
OBJ_FILES       += $(patsubst %.c,%.o,$(C_FILES))
OBJ_FILES       += $(patsubst %.cc,%.o,$(CC_FILES))
OBJ_FILES       += $(patsubst %.cpp,%.o,$(CPP_FILES))
endif

OBJ_FILES_HERE   = $(patsubst ./%,%,$(OBJ_FILES))
OBJ_FILES_BUILD  = $(addprefix $(BUILD_PATH)/,$(OBJ_FILES_HERE))

OBJ_FILES_DIRS   =

COMPILEFLAGS    += $(foreach n,$(MODULES),$($(n)_CFLAGS))
LINKFLAGS       += $(foreach n,$(MODULES),$($(n)_LDFLAGS))

COMPILEFLAGS    += $(foreach n,$(INCLUDE_PATH),-I$(n))
COMPILEFLAGS    += $(foreach n,$(DEFINES),-D$($(n)))


################################################################################
# QT options
################################################################################

MOC_FILES_CPP_  += $(foreach n,$(MOC_FILES),$(n).moc.cpp)
MOC_FILES_CPP   += $(addprefix $(BUILD_PATH)/,$(MOC_FILES_CPP_))
MOC_FILES_OBJ   += $(foreach n,$(MOC_FILES),$(n).moc.o)
OBJ_FILES_BUILD += $(addprefix $(BUILD_PATH)/,$(MOC_FILES_OBJ))

QRC_FILES_CPP_  += $(foreach n,$(QRC_FILES),$(n).qrc.cpp)
QRC_FILES_CPP   += $(addprefix $(BUILD_PATH)/,$(QRC_FILES_CPP_))
QRC_FILES_OBJ   += $(foreach n,$(QRC_FILES),$(n).qrc.o)
OBJ_FILES_BUILD += $(addprefix $(BUILD_PATH)/,$(QRC_FILES_OBJ))

################################################################################
# Compile things
################################################################################
ALL : all
all : output_dirs object_dirs $(MOC_FILES_CPP) $(OUTPUT_NAME)

ifeq ("$(MAKE_TYPE)", "static")
$(OUTPUT_NAME) : $(OBJ_FILES_BUILD)
	$(AR) rcs $@ $^
else
$(OUTPUT_NAME) :$(OBJ_FILES_BUILD)
	$(CXX) -o $@ $^ $(COMPILEFLAGS) $(LINKFLAGS)
endif

# Auto dependencies

$(BUILD_PATH)/%.d: %.c
	@mkdir -p $$(dirname $@)   
	@set -e; rm -f $@; \
	$(CC) -MM  $< $(COMPILEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(BUILD_PATH)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

$(BUILD_PATH)/%.d: %.cc
	@mkdir -p $$(dirname $@)  
	@set -e; rm -f $@; \
	$(CXX) -MM  $< $(COMPILEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(BUILD_PATH)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

$(BUILD_PATH)/%.d: %.cpp
	@mkdir -p $$(dirname $@)  
	@set -e; rm -f $@; \
	$(CXX) -MM  $< $(COMPILEFLAGS) > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(BUILD_PATH)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

sinclude $(OBJ_FILES_BUILD:.o=.d)

# Default rules
$(BUILD_PATH)/%.o: %.cc %.h $(BUILD_PATH)/%.d
	$(CXX) -o $@  -c $< $(COMPILEFLAGS)

$(BUILD_PATH)/%.o: %.cpp %.h $(BUILD_PATH)/%.d
	$(CXX) -o $@  -c $< $(COMPILEFLAGS)

$(BUILD_PATH)/%.o: %.c %.h $(BUILD_PATH)/%.d
	$(CC) -o $@  -c $< $(COMPILEFLAGS)

$(BUILD_PATH)/%.o: %.cpp $(BUILD_PATH)/%.d
	$(CXX) -o $@  -c $< $(COMPILEFLAGS)

$(BUILD_PATH)/%.o: %.cc $(BUILD_PATH)/%.d
	$(CXX) -o $@  -c $< $(COMPILEFLAGS)

$(BUILD_PATH)/%.o: %.c $(BUILD_PATH)/%.d
	$(CC) -o $@  -c $< $(COMPILEFLAGS)

# MOC rules
$(BUILD_PATH)/%.moc.cpp : %.h
	$(MOC) $< -o $@  $(MOCFLAGS) 
	
$(BUILD_PATH)/%.moc.o: $(BUILD_PATH)/%.moc.cpp
	$(CXX) -c $^ -o $@  $(COMPILEFLAGS)

# Resource rules
# FIXME: check do not use -name is or not effect qrc 
#   $(RCC) -name $(basename $<) $< -o $@ 
$(BUILD_PATH)/%.qrc.cpp : %.qrc
	$(RCC) $< -o $@ 
	
$(BUILD_PATH)/%.qrc.o: $(BUILD_PATH)/%.qrc.cpp
	$(CXX) -c $^ -o $@  $(COMPILEFLAGS)

# Rules to make target dirs
.PHONY:object_dirs output_dirs clean run
object_dirs:
	@for dir in $(OBJ_FILES_BUILD); do \
	mkdir -p $$(dirname $$dir); done

output_dirs:
	@for dir in $(OUTPUT_NAME); do \
	mkdir -p $$(dirname $$dir); done

clean :
	rm -f $(OUTPUT_NAME) $(shell find $(BUILD_PATH) -name \*.o) $(shell find $(BUILD_PATH) -name \*.d) $(shell find $(BUILD_PATH) -name \*.moc.cpp)

run :
	./$(OUTPUT_NAME)


################################################################################
# Dependents
################################################################################
sinclude ./depend.mk

